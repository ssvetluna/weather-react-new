{"ast":null,"code":"var _jsxFileName = \"/Users/svetlanastepanenko/Desktop/weather-react-new/src/ForecastDays.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport MainImage from \"./MainImage\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport CurrentDate from \"./CurrentDate\";\nimport \"./ForecastDays.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ForecastDays(props) {\n  _s();\n\n  let [loaded, setLoaded] = useState(false);\n  let [forecast, setForecast] = useState(null);\n\n  function handleResponse(response) {\n    setLoaded(true);\n    setForecast(response.data.daily);\n  }\n\n  if (loaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ForecastDays\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: forecast.map(function (dailyForecast, index) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"Card\",\n              id: \"Forecastbase\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ForecastDaysDate\",\n                children: /*#__PURE__*/_jsxDEV(CurrentDate, {\n                  date: new Date(forecast[0].dt * 1000),\n                  style: \"forecast\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 27,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 26,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ForecastDaysImage\",\n                children: /*#__PURE__*/_jsxDEV(MainImage, {\n                  icon: forecast[0].weather[0].icon,\n                  size: 40\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 33,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ForecastDaysTempMax\",\n                children: [Math.round(forecast[0].temp.max), \"\\xB0\", \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ForecastDaysTempMin\",\n                children: [Math.round(forecast[0].temp.min), \"\\xB0\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  } else {\n    let apiUrl = `https://api.openweathermap.org/data/2.5/onecall?lat=${props.coords.lat}&lon=${props.coords.lon}&appid=6643c7326a4c2a38838264a28531d97e&units=metric`;\n    axios.get(apiUrl).then(handleResponse);\n    return null;\n  }\n}\n\n_s(ForecastDays, \"20/pdcvQnLtcZUd5Lz9vhTDggVQ=\");\n\n_c = ForecastDays;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastDays\");","map":{"version":3,"names":["React","MainImage","useState","axios","CurrentDate","ForecastDays","props","loaded","setLoaded","forecast","setForecast","handleResponse","response","data","daily","map","dailyForecast","index","Date","dt","weather","icon","Math","round","temp","max","min","apiUrl","coords","lat","lon","get","then"],"sources":["/Users/svetlanastepanenko/Desktop/weather-react-new/src/ForecastDays.js"],"sourcesContent":["import React from \"react\";\nimport MainImage from \"./MainImage\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport CurrentDate from \"./CurrentDate\";\n\nimport \"./ForecastDays.css\";\n\nexport default function ForecastDays(props) {\n  let [loaded, setLoaded] = useState(false);\n  let [forecast, setForecast] = useState(null);\n\n  function handleResponse(response) {\n    setLoaded(true);\n    setForecast(response.data.daily);\n  }\n\n  if (loaded) {\n    return (\n      <div className=\"ForecastDays\">\n        <div className=\"row\">\n          {forecast.map(function (dailyForecast, index) {\n            return (\n              <div className=\"col\">\n                <div className=\"Card\" id=\"Forecastbase\">\n                  <span className=\"ForecastDaysDate\">\n                    <CurrentDate\n                      date={new Date(forecast[0].dt * 1000)}\n                      style=\"forecast\"\n                    />\n                  </span>\n                  <span className=\"ForecastDaysImage\">\n                    <MainImage icon={forecast[0].weather[0].icon} size={40} />\n                  </span>\n                  <span className=\"ForecastDaysTempMax\">\n                    {Math.round(forecast[0].temp.max)}°{\" \"}\n                  </span>\n                  <span className=\"ForecastDaysTempMin\">\n                    {Math.round(forecast[0].temp.min)}°\n                  </span>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  } else {\n    let apiUrl = `https://api.openweathermap.org/data/2.5/onecall?lat=${props.coords.lat}&lon=${props.coords.lon}&appid=6643c7326a4c2a38838264a28531d97e&units=metric`;\n    axios.get(apiUrl).then(handleResponse);\n    return null;\n  }\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAO,oBAAP;;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;EAAA;;EAC1C,IAAI,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,KAAD,CAAlC;EACA,IAAI,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAtC;;EAEA,SAASS,cAAT,CAAwBC,QAAxB,EAAkC;IAChCJ,SAAS,CAAC,IAAD,CAAT;IACAE,WAAW,CAACE,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAX;EACD;;EAED,IAAIP,MAAJ,EAAY;IACV,oBACE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAK,SAAS,EAAC,KAAf;QAAA,UACGE,QAAQ,CAACM,GAAT,CAAa,UAAUC,aAAV,EAAyBC,KAAzB,EAAgC;UAC5C,oBACE;YAAK,SAAS,EAAC,KAAf;YAAA,uBACE;cAAK,SAAS,EAAC,MAAf;cAAsB,EAAE,EAAC,cAAzB;cAAA,wBACE;gBAAM,SAAS,EAAC,kBAAhB;gBAAA,uBACE,QAAC,WAAD;kBACE,IAAI,EAAE,IAAIC,IAAJ,CAAST,QAAQ,CAAC,CAAD,CAAR,CAAYU,EAAZ,GAAiB,IAA1B,CADR;kBAEE,KAAK,EAAC;gBAFR;kBAAA;kBAAA;kBAAA;gBAAA;cADF;gBAAA;gBAAA;gBAAA;cAAA,QADF,eAOE;gBAAM,SAAS,EAAC,mBAAhB;gBAAA,uBACE,QAAC,SAAD;kBAAW,IAAI,EAAEV,QAAQ,CAAC,CAAD,CAAR,CAAYW,OAAZ,CAAoB,CAApB,EAAuBC,IAAxC;kBAA8C,IAAI,EAAE;gBAApD;kBAAA;kBAAA;kBAAA;gBAAA;cADF;gBAAA;gBAAA;gBAAA;cAAA,QAPF,eAUE;gBAAM,SAAS,EAAC,qBAAhB;gBAAA,WACGC,IAAI,CAACC,KAAL,CAAWd,QAAQ,CAAC,CAAD,CAAR,CAAYe,IAAZ,CAAiBC,GAA5B,CADH,UACsC,GADtC;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAVF,eAaE;gBAAM,SAAS,EAAC,qBAAhB;gBAAA,WACGH,IAAI,CAACC,KAAL,CAAWd,QAAQ,CAAC,CAAD,CAAR,CAAYe,IAAZ,CAAiBE,GAA5B,CADH;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAbF;YAAA;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA,QADF;QAqBD,CAtBA;MADH;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EA6BD,CA9BD,MA8BO;IACL,IAAIC,MAAM,GAAI,uDAAsDrB,KAAK,CAACsB,MAAN,CAAaC,GAAI,QAAOvB,KAAK,CAACsB,MAAN,CAAaE,GAAI,sDAA7G;IACA3B,KAAK,CAAC4B,GAAN,CAAUJ,MAAV,EAAkBK,IAAlB,CAAuBrB,cAAvB;IACA,OAAO,IAAP;EACD;AACF;;GA5CuBN,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}